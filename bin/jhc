#!/usr/bin/ruby
# inspired by http://d.hatena.ne.jp/hitode909/20110614/1308032945
require 'yaml'
require 'optparse'
require 'open-uri'
require 'fileutils'
require 'rubygems'
require 'nokogiri'
require 'haml'
require 'json'

WEDATA_URL = 'http://wedata.net/databases/JHC/items.json'
CONFIG_PATH = ENV['HOME'] + '/.jhc'

def main(args)
  if !File.exists?(CONFIG_PATH)
    puts "getting config data from wedata.net ..."
    load_config
  end
  cfg = YAML.load(File.read(CONFIG_PATH))
  opt = parse_args(args)
  dir = args[0]
  hlp = "Usage: jhc -t HTML_TITLE -j jquery,underscore -c bootstrap"

  raise hlp unless dir

  FileUtils.mkdir_p(dir)

  %w(js css).each do |key|
    next unless opt[key]
    FileUtils.mkdir_p(File.join(dir, key))
    opt[key].split(',').each do |lib|
      if item = cfg.find {|c| c['data']['key'] == lib && c['data']['type'] == key }
        content = open(item['data']['url']).read
        File.open(File.join(dir, key, "#{lib}.#{key}"), 'w').write(content)
      end
    end
  end

  body = nil
  if opt['extract']
    doc = Nokogiri::HTML.parse(open(opt['extract']).read)
    body = doc.search('/html/body').to_s
  end

  haml = <<-'EOH'
!!!
%html
  %head
    %meta{:charset=>'utf-8'}
    %title= opt['title']
    - if opt['js']
      - opt['js'].split(',').each do |key| 
        %script{:language=>'javascript',:type=>'text/javascript',:src=>"./javascripts/#{key}.js"}
    - if opt['css']
      - opt['css'].split(',').each do |key| 
        %link{:rel=>'stylesheet',:type=>'text/css',:href=>"./stylesheets/#{key}.css"}
  - if body
    = body
  - else
    %body
  EOH
  html = Haml::Engine.new(haml, :format => :html5).render(binding)
  File.open(File.join(dir, 'index.html'), 'w').write(html)
rescue StandardError => e
  puts e
  exit 1 
end

def parse_args(args)
  opt = {}
  OptionParser.new do |o|
    %w(title js css extract).each do |key|
      o.on("-#{key.chars.first} #{key.upcase}") {|v| opt[key] = v }
    end
    o.parse!(args)
  end
  p opt
  opt
end

def load_config
  json = JSON.parse(open(WEDATA_URL).read)
  file = File.open(CONFIG_PATH, 'w')
  file.write(json.to_yaml)
  file.close
end

main(ARGV.dup)

