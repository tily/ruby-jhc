#!/usr/bin/ruby
# inspired by http://d.hatena.ne.jp/hitode909/20110614/1308032945
require 'yaml'
require 'optparse'
require 'open-uri'
require 'fileutils'
require 'rubygems'
require 'nokogiri'
require 'haml'

CONFIG = <<EOC
--- 
javascripts: 
  jquery: http://code.jquery.com/jquery-1.7.js
  underscore: http://documentcloud.github.com/underscore/underscore.js
  backbone: http://documentcloud.github.com/backbone/backbone.js
stylesheets: 
  bootstrap: https://raw.github.com/twitter/bootstrap/master/bootstrap.css
EOC

def main(args)
  cfg = YAML.load(CONFIG)
  opt = parse_args(args)
  dir = args[0]
  hlp = "Usage: jhc -t HTML_TITLE -j #{cfg['javascripts'].keys.join(',')} -s #{cfg['stylesheets'].keys.join(',')}"

  raise hlp unless dir

  FileUtils.mkdir_p(dir)

  %w(javascripts stylesheets).each do |key|
    next unless opt[key]
    FileUtils.mkdir_p(File.join(dir, key))
    opt[key].split(',').each do |lib|
      if url = cfg[key][lib]
        content = open(url).read
        ext = key == 'javascripts' ? 'js' : 'css'
	File.open(File.join(dir, key, "#{lib}.#{ext}"), 'w').write(content)
      end
    end
  end

  body = nil
  if opt['extract']
    doc = Nokogiri::HTML.parse(open(opt['extract']).read)
    body = doc.search('/html/body').to_s
  end

  haml = <<-'EOH'
!!!
%html
  %head
    %meta{:charset=>'utf-8'}
    %title= opt['title']
    - if opt['javascripts']
      - opt['javascripts'].split(',').each do |key| 
        %script{:language=>'javascript',:type=>'text/javascript',:src=>"./javascripts/#{key}.js"}
    - if opt['stylesheets']
      - opt['stylesheets'].split(',').each do |key| 
        %link{:rel=>'stylesheet',:type=>'text/css',:href=>"./stylesheets/#{key}.css"}
  - if body
    = body
  - else
    %body
  EOH
  html = Haml::Engine.new(haml, :format => :html5).render(binding)
  File.open(File.join(dir, 'index.html'), 'w').write(html)
rescue StandardError => e
  puts e
  exit 1 
end

def parse_args(args)
  opt = {}
  OptionParser.new do |o|
    %w(title javascripts stylesheets extract).each do |key|
      o.on("-#{key.chars.first} #{key.upcase}") {|v| opt[key] = v }
    end
    o.parse!(args)
  end
  opt
end

main(ARGV.dup)

