#!/usr/bin/ruby
# inspired by http://d.hatena.ne.jp/hitode909/20110614/1308032945
require 'yaml'
require 'optparse'
require 'open-uri'
require 'fileutils'
require 'kconv'
require 'rubygems'
require 'nokogiri'
require 'haml'
require 'json'
require 'term/ansicolor'
include Term::ANSIColor

VERSION = File.read(File.dirname(__FILE__) + '/../VERSION')
WEDATA_URL = 'http://wedata.net/databases/JHC/items.json'
CONFIG_PATH = ENV['HOME'] + '/.jhc'

def main(args)
  puts white("# welcome to jhc v#{VERSION}")
  if !File.exists?(CONFIG_PATH)
    puts white("# downloading: config data from wedata.net")
    load_config
  end
  cfg = YAML.load(File.read(CONFIG_PATH))
  opt = parse_args(args)
  dir = args[0]

  raise help(cfg) unless dir

  FileUtils.mkdir_p(dir)

  %w(js css).each do |key|
    next unless opt[key]
    FileUtils.mkdir_p(File.join(dir, key))
    opt[key].split(',').each do |lib|
      if item = cfg.find {|c| c['data']['key'] == lib && c['data']['type'] == key }
        content = open(item['data']['url']).read
        File.open(File.join(dir, key, "#{lib}.#{key}"), 'w').write(content)
        puts blue("add: " +  File.join(dir, key, "#{lib}.#{key}")) + white(" # #{item['data']['url']}")
      end
    end
  end

  body = nil
  if opt['extract']
    puts white("# extracting body of #{opt['extract']}")
    doc = Nokogiri::HTML.parse(open(opt['extract']).read)
    body = doc.search('/html/body').to_s.toutf8
  end

  haml = File.read(File.dirname(__FILE__) + '/../lib/index.haml')
  html = Haml::Engine.new(haml, :format => :html5).render(binding)
  puts blue("add: #{File.join(dir, 'index.html')}")
  File.open(File.join(dir, 'index.html'), 'w').write(html)
rescue StandardError => e
  puts e
  exit 1 
end

def parse_args(args)
  opt = {}
  OptionParser.new do |o|
    %w(title js css extract).each do |key|
      o.on("-#{key.chars.first} #{key.upcase}") {|v| opt[key] = v }
    end
    o.parse!(args)
  end
  opt
end

def load_config
  json = JSON.parse(open(WEDATA_URL).read)
  file = File.open(CONFIG_PATH, 'w')
  file.write(json.to_yaml)
  file.close
end

def help(config)
  buf = ''
  buf += red("Usage: jhc -t HTML_TITLE -j jquery,underscore -c bootstrap\n")
  buf += red("Available JavaScript Libraries:\n")
  config.select{|c| c['data']['type'] == 'js'}.each do |c|
    buf += red("\t#{c['data']['key']}\t#{c['data']['url']}\n")
  end
  buf += red("Available StyleSheets:\n")
  config.select{|c| c['data']['type'] == 'css'}.each do |c|
    buf += red("\t#{c['data']['key']}\t#{c['data']['url']}\n")
  end
  buf
end

main(ARGV.dup)

